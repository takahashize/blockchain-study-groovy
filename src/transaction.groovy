@Grapes([
        @Grab('org.bitcoinj:bitcoinj-core:0.14.3'),
        @Grab('org.slf4j:slf4j-simple:1.7.21')
])
import org.bitcoinj.core.Context
import org.bitcoinj.core.Transaction
import org.bitcoinj.core.TransactionInput
import org.bitcoinj.core.VerificationException
import org.bitcoinj.params.UnitTestParams
import org.bitcoinj.script.ScriptBuilder

import static org.bitcoinj.script.ScriptOpCodes.*

def context = new Context(UnitTestParams.get())

// The transaction in hex.
def txhex = '''\
0100000001795b88d47a74e3be0948fc9d1b4737f96097474d57151afa6f77c787961e47cc120000006a47304402202289f9e1ae2ed981cd0bf62f8\
22f6ae4aea40c65c7339d90643cea90de93ad1502205c8a08b3265f9ba7e99057d030d5b91c889a1b99f94a3a5b79d7daaada2409b6012103798b51\
f980e7a3690af6b43ce3467db75bede190385702c4d9d48c0a735ff4a9ffffffff01c0a83200000000001976a91447b8e62e008f82d95d1f565055a\
8243cc243d32388ac00000000'''.decodeHex()

def tx = new Transaction(context.getParams(), txhex)

// Confirm that the id is the reverse of the hash.
assert tx.hash.reversedBytes.encodeHex().toString() \
    == 'a96d29f25018d358ecd59eb4e5b4fe8c4c2684c5b94c7380858582357ba85ff4'
println "tx hash: ${tx.hash.reversedBytes.encodeHex()}"

// Confirm that the id is the reverse of the hash.
def txid = tx.hash.bytes.encodeHex()
assert tx.hashAsString == txid.toString()
println "tx id: $tx.hashAsString"

// Confirm that number of inputs is 1.
assert tx.inputs.size() == 1
println "tx input count: ${tx.inputs.size()}"

// Confirm that number of outputs is 1.
assert tx.outputs.size() == 1
println "tx output count: ${tx.outputs.size()}"

// Gather the input transaction hash and output number.
def prevtxhash = tx.inputs[0].outpoint.hash
def prevtxoutnum = tx.inputs[0].outpoint.index as int

// The input tx is a big one:
def prevtxhex = ''.decodeHex()

// Confirm that we have the correct input transaction.
def prevtx = new Transaction(context.getParams(), prevtxhex)
assert prevtx.hash == prevtxhash
println "input tx id: $prevtx.hashAsString"

// We have previously gathered the scriptPubkey.
// var scriptPubkey = Script().fromString('OP_DUP OP_HASH160 20 0x1cd597793bd95c255cb4fd3f69f3b51d571ca555 OP_EQUALVERIFY OP_CHECKSIG')
def scriptPubkey = new ScriptBuilder()
        .op(OP_DUP)
        .op(OP_HASH160)
        .data("1cd597793bd95c255cb4fd3f69f3b51d571ca555".decodeHex())
        .op(OP_EQUALVERIFY)
        .op(OP_CHECKSIG)
        .build()

// Confirm that we have the correct scriptPubkey.
assert scriptPubkey.toString() == prevtx.outputs[prevtxoutnum].scriptPubKey.toString()
println "scriptPubkey: $scriptPubkey"
println "scriptSig: ${tx.inputs[0].scriptSig}"

// Run the check transaction function, which runs the script interpreter and
// also performs all the other checks to know if the transaction is valid or
// not.
tx.inputs[0].connect(prevtx, TransactionInput.ConnectMode.ABORT_ON_CONFLICT)
tx.inputs[0].verify()
println "tx is valid."

// Now suppose we modify the transaction to replace the scriptSig with
// something that is guaranteed not to be valid, such as an OP_RETURN, which
// immediately invalidates the transaction. The transaction should therefore no
// longer be valid.
def tx2 = new Transaction(context.getParams(), txhex)

tx2.inputs[0].scriptSig = new ScriptBuilder()
        .op(OP_RETURN)
        .build();

try {
    tx2.inputs[0].connect(prevtx, TransactionInput.ConnectMode.ABORT_ON_CONFLICT)
    tx2.inputs[0].verify()
    println "tx2 is valid."
} catch (VerificationException e) {
    println "modeified tx2 is not valid. $e.message"
}